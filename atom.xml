<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝阳</title>
  
  <subtitle>前方是绝路，希望在转角</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-07T12:03:42.554Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>西瓜哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot启动源码</title>
    <link href="http://yoursite.com/2020/05/07/springboot%E5%90%AF%E5%8A%A8%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2020/05/07/springboot启动源码/</id>
    <published>2020-05-07T12:02:41.000Z</published>
    <updated>2020-05-07T12:03:42.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot源码解析-一-启动过程"><a href="#springboot源码解析-一-启动过程" class="headerlink" title="springboot源码解析(一):启动过程"></a>springboot源码解析(一):启动过程</h1><h3 id="1、springboot的入口程序"><a href="#1、springboot的入口程序" class="headerlink" title="1、springboot的入口程序"></a>1、springboot的入口程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartupApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StartupApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当程序开始执行之后，会调用SpringApplication的构造方法，进行某些初始参数的设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新的实例，这个应用程序的上下文将要从指定的来源加载Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//资源初始化资源加载器，默认为null</span></span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">//断言主要加载资源类不能为 null，否则报错</span></span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="comment">//初始化主要加载资源类集合并去重</span></span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">//推断当前 WEB 应用类型，一共有三种：NONE,SERVLET,REACTIVE</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">//设置应用上线文初始化器,从"META-INF/spring.factories"读取ApplicationContextInitializer类的实例名称集合并去重，并进行set去重。（一共7个）</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//设置监听器,从"META-INF/spring.factories"读取ApplicationListener类的实例名称集合并去重，并进行set去重。（一共11个）</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//推断主入口应用类，通过当前调用栈，获取Main方法所在类，并赋值给mainApplicationClass</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述构造方法中，有一个判断应用类型的方法，用来判断当前应用程序的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WebApplicationType的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WebApplicationType &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment"> * embedded web server.</span></span><br><span class="line"><span class="comment"> * 非web项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NONE,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded servlet web server.</span></span><br><span class="line"><span class="comment"> * servlet web 项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SERVLET,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded reactive web server.</span></span><br><span class="line"><span class="comment"> * 响应式 web 项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REACTIVE;</span><br></pre></td></tr></table></figure><p>springboot启动的运行方法，可以看到主要是各种运行环境的准备工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建并启动计时监控类</span></span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">    <span class="comment">//2、初始化应用上下文和异常报告集合</span></span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//3、设置系统属性“java.awt.headless”的值，默认为true，用于运行headless服务器，进行简单的图像处理，多用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//4、创建所有spring运行监听器并发布应用启动事件，简单说的话就是获取SpringApplicationRunListener类型的实例（EventPublishingRunListener对象），并封装进SpringApplicationRunListeners对象，然后返回这个SpringApplicationRunListeners对象。说的再简单点，getRunListeners就是准备好了运行时监听器EventPublishingRunListener。</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//5、初始化默认应用参数类</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        <span class="comment">//6、根据运行监听器和应用参数来准备spring环境</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        <span class="comment">//将要忽略的bean的参数打开</span></span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">//7、创建banner打印类</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">//8、创建应用上下文，可以理解为创建一个容器</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">        <span class="comment">//9、准备异常报告器，用来支持报告关于启动的错误</span></span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        <span class="comment">//10、准备应用上下文，该步骤包含一个非常关键的操作，将启动类注入容器，为后续开启自动化提供基础</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">//11、刷新应用上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">        <span class="comment">//12、应用上下文刷新后置处理，做一些扩展功能</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">//13、停止计时监控类</span></span><br><span class="line">stopWatch.stop();</span><br><span class="line">        <span class="comment">//14、输出日志记录执行主类名、时间信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//15、发布应用上下文启动监听事件</span></span><br><span class="line">listeners.started(context);</span><br><span class="line">        <span class="comment">//16、执行所有的Runner运行器</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//17、发布应用上下文就绪事件</span></span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//18、返回应用上下文</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面详细介绍各个启动的环节：</p><p>1、创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line"><span class="comment">//详细源代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">start(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't start StopWatch: it's already running"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.currentTaskName = taskName;</span><br><span class="line"><span class="keyword">this</span>.startTimeNanos = System.nanoTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、初始化应用上下文和异常报告集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>3、设置系统属性java.awt.headless的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.awt.headless模式是在缺少显示屏、键盘或者鼠标的系统配置</span></span><br><span class="line"><span class="comment">当配置了如下属性之后，应用程序可以执行如下操作：</span></span><br><span class="line"><span class="comment">1、创建轻量级组件</span></span><br><span class="line"><span class="comment">2、收集关于可用的字体、字体指标和字体设置的信息</span></span><br><span class="line"><span class="comment">3、设置颜色来渲染准备图片</span></span><br><span class="line"><span class="comment">4、创造和获取图像，为渲染准备图片</span></span><br><span class="line"><span class="comment">5、使用java.awt.PrintJob,java.awt.print.*和javax.print.*类里的方法进行打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,</span><br><span class="line">System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建所有spring运行监听器并发布应用启动事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建spring监听器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</span><br><span class="line">&#125;</span><br><span class="line">SpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class="line"><span class="keyword">this</span>.log = log;</span><br><span class="line"><span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环遍历获取监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.starting();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处的监听器可以看出是事件发布监听器，主要用来发布启动事件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是创建application事件‘applicationStartingEvent’</span></span><br><span class="line"><span class="keyword">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> ApplicationStartingEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//applicationStartingEvent是springboot框架最早执行的监听器，在该监听器执行started方法时，会继续发布事件，主要是基于spring的事件机制</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">        <span class="comment">//获取线程池，如果为空则同步处理。这里线程池为空，还未初始化</span></span><br><span class="line">Executor executor = getTaskExecutor();</span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line"><span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//异步发送事件</span></span><br><span class="line">executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//同步发送事件</span></span><br><span class="line">invokeListener(listener, event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、初始化默认应用参数类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultApplicationArguments</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">Assert.notNull(args, <span class="string">"Args must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.source = <span class="keyword">new</span> Source(args);</span><br><span class="line"><span class="keyword">this</span>.args = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、根据运行监听器和应用参数来准备spring环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">//详细环境的准备</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取或者创建应用环境</span></span><br><span class="line">ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 配置应用环境，配置propertySource和activeProfiles</span></span><br><span class="line">configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">//listeners环境准备，广播ApplicationEnvironmentPreparedEvent</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line">listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">//将环境绑定给当前应用程序</span></span><br><span class="line">bindToSpringApplication(environment);</span><br><span class="line">    <span class="comment">//对当前的环境类型进行判断，如果不一致进行转换</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">deduceEnvironmentClass());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//配置propertySource对它自己的递归依赖</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line"><span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取或者创建应用环境，根据应用程序的类型可以分为servlet环境、标准环境(特殊的非web环境)和响应式环境</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存在则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//根据webApplicationType创建对应的Environment</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardReactiveWebEnvironment();</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置应用环境</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.addConversionService) &#123;</span><br><span class="line">ConversionService conversionService = ApplicationConversionService.getSharedInstance();</span><br><span class="line">environment.setConversionService((ConfigurableConversionService) conversionService);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//配置property sources</span></span><br><span class="line">configurePropertySources(environment, args);</span><br><span class="line">    <span class="comment">//配置profiles</span></span><br><span class="line">configureProfiles(environment, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、创建banner的打印类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line"><span class="comment">//打印类的详细操作过程</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Banner.Mode.OFF) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">ResourceLoader resourceLoader = (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) ? <span class="keyword">this</span>.resourceLoader</span><br><span class="line">: <span class="keyword">new</span> DefaultResourceLoader(getClassLoader());</span><br><span class="line">SpringApplicationBannerPrinter bannerPrinter = <span class="keyword">new</span> SpringApplicationBannerPrinter(resourceLoader, <span class="keyword">this</span>.banner);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Mode.LOG) &#123;</span><br><span class="line"><span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, logger);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, System.out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、创建应用的上下文:根据不同哦那个的应用类型初始化不同的上下文应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line"><span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line">contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line">contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、准备异常报告器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、准备应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//应用上下文的environment</span></span><br><span class="line">context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">//应用上下文后处理</span></span><br><span class="line">postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">//为上下文应用所有初始化器，执行容器中的applicationContextInitializer(spring.factories的实例)，将所有的初始化对象放置到context对象中</span></span><br><span class="line">applyInitializers(context);</span><br><span class="line">    <span class="comment">//触发所有SpringApplicationRunListener监听器的ContextPrepared事件方法。添加所有的事件监听器</span></span><br><span class="line">listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">//记录启动日志</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">logStartupProfileInfo(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册启动参数bean，将容器指定的参数封装成bean，注入容器</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">    <span class="comment">//设置banner</span></span><br><span class="line"><span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载所有资源，指的是启动器指定的参数</span></span><br><span class="line">Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    <span class="comment">//将bean加载到上下文中</span></span><br><span class="line">load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">//触发所有springapplicationRunListener监听器的contextLoaded事件方法，</span></span><br><span class="line">listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">    <span class="comment">//这里没有做任何的处理过程，因为beanNameGenerator和resourceLoader默认为空，可以方便后续做扩展处理</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">context.getBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line"><span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</span><br><span class="line">((GenericApplicationContext) context).setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> DefaultResourceLoader) &#123;</span><br><span class="line">((DefaultResourceLoader) context).setClassLoader(<span class="keyword">this</span>.resourceLoader.getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.addConversionService) &#123;</span><br><span class="line">context.getBeanFactory().setConversionService(ApplicationConversionService.getSharedInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">    <span class="comment">//将启动器类加载到spring容器中，为后续的自动化配置奠定基础，之前看到的很多注解也与此相关</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">&#125;</span><br><span class="line">BeanDefinitionLoader loader = createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">&#125;</span><br><span class="line">loader.load();</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">    <span class="comment">//springboot会优先选择groovy加载方式，找不到在选择java方式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Class&lt;?&gt; source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;</span><br><span class="line"><span class="comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span></span><br><span class="line">GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);</span><br><span class="line">load(loader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isComponent(source)) &#123;</span><br><span class="line"><span class="keyword">this</span>.annotatedReader.register(source);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、刷新应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">refresh(context);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">context.registerShutdownHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line"><span class="comment">// Not allowed in some environments.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">            <span class="comment">//刷新上下文环境，初始化上下文环境，对系统的环境变量或者系统属性进行准备和校验</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">            <span class="comment">//初始化beanfactory，解析xml，相当于之前的xmlBeanfactory操作</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">            <span class="comment">//为上下文准备beanfactory，对beanFactory的各种功能进行填充，如@autowired，设置spel表达式解析器，设置编辑注册器，添加applicationContextAwareprocessor处理器等等</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">                <span class="comment">//提供子类覆盖的额外处理，即子类处理自定义的beanfactorypostProcess</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">                <span class="comment">//激活各种beanfactory处理器</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">                <span class="comment">//注册拦截bean创建的bean处理器，即注册beanPostProcessor</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">                <span class="comment">//初始化上下文中的资源文件如国际化文件的处理</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">                <span class="comment">//初始化上下文事件广播器</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">                <span class="comment">//给子类扩展初始化其他bean</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">                <span class="comment">//在所有的bean中查找listener bean,然后 注册到广播器中</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">                <span class="comment">//初始化剩余的非懒惰的bean，即初始化非延迟加载的bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">                <span class="comment">//发完成刷新过程，通知声明周期处理器刷新过程，同时发出ContextRefreshEvent通知别人</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12、应用上下文刷新后置处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line"><span class="comment">//当前方法的代码是空的，可以做一些自定义的后置处理操作</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、停止计时监控类：计时监听器停止，并统计一些任务执行信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">stopWatch.stop();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't stop StopWatch: it's not running"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> lastTime = System.nanoTime() - <span class="keyword">this</span>.startTimeNanos;</span><br><span class="line"><span class="keyword">this</span>.totalTimeNanos += lastTime;</span><br><span class="line"><span class="keyword">this</span>.lastTaskInfo = <span class="keyword">new</span> TaskInfo(<span class="keyword">this</span>.currentTaskName, lastTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.keepTaskList) &#123;</span><br><span class="line"><span class="keyword">this</span>.taskList.add(<span class="keyword">this</span>.lastTaskInfo);</span><br><span class="line">&#125;</span><br><span class="line">++<span class="keyword">this</span>.taskCount;</span><br><span class="line"><span class="keyword">this</span>.currentTaskName = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14、输出日志记录执行主类名、时间信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15、发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listeners.started(context);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.started(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16、执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">callRunners(context, applicationArguments);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line"><span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">callRunner((ApplicationRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">callRunner((CommandLineRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17、发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listeners.running(context);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.running(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18、返回应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> context;</span><br></pre></td></tr></table></figure><hr><p>注意：</p><p>整个springboot框架中获取factorys文件的方式统一如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryTypeName = factoryType.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">createSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">ClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; instances = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//装载class文件到内存</span></span><br><span class="line">Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</span><br><span class="line">Assert.isAssignable(type, instanceClass);</span><br><span class="line">Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);</span><br><span class="line">                <span class="comment">//通过反射创建实例</span></span><br><span class="line">T instance = (T) BeanUtils.instantiateClass(constructor, args);</span><br><span class="line">instances.add(instance);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot instantiate "</span> + type + <span class="string">" : "</span> + name, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.factory文件中的类的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"># PropertySource Loaders 属性文件加载器</span><br><span class="line">org.springframework.boot.env.PropertySourceLoader=\</span><br><span class="line"># properties文件加载器</span><br><span class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span><br><span class="line"># yaml文件加载器</span><br><span class="line">org.springframework.boot.env.YamlPropertySourceLoader</span><br><span class="line"></span><br><span class="line"># Run Listeners 运行时的监听器</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line"># 程序运行过程中所有监听通知都是通过此类来进行回调</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br><span class="line"></span><br><span class="line"># Error Reporters错误报告器</span><br><span class="line">org.springframework.boot.SpringBootExceptionReporter=\</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzers</span><br><span class="line"></span><br><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line"># 报告spring容器的一些常见的错误配置</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line"># 设置spring应用上下文的ID</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line"># 使用环境属性context.initializer.classes指定初始化器进行初始化规则</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="line"># 将内置servlet容器实际使用的监听端口写入到environment环境属性中</span><br><span class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line"># 应用上下文加载完成后对缓存做清除工作，响应事件ContextRefreshEvent</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line"># 监听双亲应用上下文的关闭事件并往自己的孩子应用上下文中传播，相关事件ParentContextAvailableEvent/ContextClosedEvent</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="line"># 如果系统文件编码和环境变量中指定的不同则终止应用启动。具体的方法是比较系统属性file.encoding和环境变量spring.mandatory-file-encoding是否相等(大小写不敏感)。</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line"># 根据spring.output.ansi.enabled参数配置AnsiOutput</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line"># EnvironmentPostProcessor，从常见的那些约定的位置读取配置文件，比如从以下目录读取#application.properties,application.yml等配置文件：</span><br><span class="line"># classpath:</span><br><span class="line"># file:.</span><br><span class="line"># classpath:config</span><br><span class="line"># file:./config/:</span><br><span class="line"># 也可以配置成从其他指定的位置读取配置文件</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line"># 监听到事件后转发给环境变量context.listener.classes指定的那些事件监听器</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line"># 一个SmartApplicationListener,对环境就绪事件ApplicationEnvironmentPreparedEvent/应用失败事件ApplicationFailedEvent做出响应，往日志DEBUG级别输出TCCL(thread context class loader)的classpath。</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line"># 检测正在使用的日志系统，默认时logback，，此时日志系统还没有初始化</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line"># 使用一个可以和Spring Boot可执行jar包配合工作的版本替换liquibase ServiceLocator</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br><span class="line"></span><br><span class="line"># Environment Post Processors</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor</span><br><span class="line"></span><br><span class="line"># Failure Analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># FailureAnalysisReporters</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</span><br><span class="line">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span><br><span class="line"></span><br><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line"># 另外单独启动一个线程实例化并调用run方法，包括验证器、消息转换器等</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br><span class="line"># Failure analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># Template availability providers</span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot源码解析-一-启动过程&quot;&gt;&lt;a href=&quot;#springboot源码解析-一-启动过程&quot; class=&quot;headerlink&quot; title=&quot;springboot源码解析(一):启动过程&quot;&gt;&lt;/a&gt;springboot源码解析(一):启动过程
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springCloud_Eureka_配置</title>
    <link href="http://yoursite.com/2020/01/07/springCloud-Eureka-%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/01/07/springCloud-Eureka-配置/</id>
    <published>2020-01-07T06:28:39.000Z</published>
    <updated>2020-01-07T06:31:04.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="springCloud-Eureka-配置"><a href="#springCloud-Eureka-配置" class="headerlink" title="springCloud_Eureka_配置"></a>springCloud_Eureka_配置</h3><h4 id="Eureka-instance"><a href="#Eureka-instance" class="headerlink" title="Eureka instance"></a>Eureka instance</h4><p>一个服务，如：订单系统，会部署多台服务器，而每台服务器上提供的服务就是instance; 负载配置。</p><h4 id="Eureka-service"><a href="#Eureka-service" class="headerlink" title="Eureka service"></a>Eureka service</h4><p>指的是服务，提供一种特定功能的服务，如：订单系统，而同一个服务可以提供多个instance;</p><h4 id="Eureka-client"><a href="#Eureka-client" class="headerlink" title="Eureka client"></a>Eureka client</h4><p>主要将自己的服务注册到服务中心。但它既可以是服务的提供者也可以是消费者。它与Eureka instance感觉差不多，但其实意义是不一样的，Eureka client是相较于Eureka server来说的。而Eureka instance更倾向于负载技术。</p><h4 id="Eureka-server"><a href="#Eureka-server" class="headerlink" title="Eureka server"></a>Eureka server</h4><p>服务注册中心。并管理各服务的中心。</p><h5 id="Eureka-instance-配置项"><a href="#Eureka-instance-配置项" class="headerlink" title="Eureka instance 配置项"></a>Eureka instance 配置项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#服务注册中心实例的主机名</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">#注册在Eureka服务中的应用组名</span><br><span class="line">eureka.instance.app-group-name=</span><br><span class="line">#注册在的Eureka服务中的应用名称</span><br><span class="line">eureka.instance.appname=</span><br><span class="line">#该实例注册到服务中心的唯一ID</span><br><span class="line">eureka.instance.instance-id=</span><br><span class="line">#该实例的IP地址</span><br><span class="line">eureka.instance.ip-address=</span><br><span class="line">#该实例，相较于hostname是否优先使用IP</span><br><span class="line">eureka.instance.prefer-ip-address=false</span><br><span class="line"></span><br><span class="line">#用于AWS平台自动扩展的与此实例关联的组名，</span><br><span class="line">eureka.instance.a-s-g-name=</span><br><span class="line">#部署此实例的数据中心</span><br><span class="line">eureka.instance.data-center-info=</span><br><span class="line">#默认的地址解析顺序</span><br><span class="line">eureka.instance.default-address-resolution-order=</span><br><span class="line">#该实例的环境配置</span><br><span class="line">eureka.instance.environment=</span><br><span class="line">#初始化该实例，注册到服务中心的初始状态</span><br><span class="line">eureka.instance.initial-status=up</span><br><span class="line">#表明是否只要此实例注册到服务中心，立马就进行通信</span><br><span class="line">eureka.instance.instance-enabled-onit=false</span><br><span class="line">#该服务实例的命名空间,用于查找属性</span><br><span class="line">eureka.instance.namespace=eureka</span><br><span class="line">#该服务实例的子定义元数据，可以被服务中心接受到</span><br><span class="line">eureka.instance.metadata-map.test = test</span><br><span class="line"></span><br><span class="line">#服务中心删除此服务实例的等待时间(秒为单位),时间间隔为最后一次服务中心接受到的心跳时间</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds=90</span><br><span class="line">#该实例给服务中心发送心跳的间隔时间，用于表明该服务实例可用</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds=30</span><br><span class="line">#该实例，注册服务中心，默认打开的通信数量</span><br><span class="line">eureka.instance.registry.default-open-for-traffic-count=1</span><br><span class="line">#每分钟续约次数</span><br><span class="line">eureka.instance.registry.expected-number-of-renews-per-min=1</span><br><span class="line"></span><br><span class="line">#该实例健康检查url,绝对路径</span><br><span class="line">eureka.instance.health-check-url=</span><br><span class="line">#该实例健康检查url,相对路径</span><br><span class="line">eureka.instance.health-check-url-path=/health</span><br><span class="line">#该实例的主页url,绝对路径</span><br><span class="line">eureka.instance.home-page-url=</span><br><span class="line">#该实例的主页url,相对路径</span><br><span class="line">eureka.instance.home-page-url-path=/</span><br><span class="line">#该实例的安全健康检查url,绝对路径</span><br><span class="line">eureka.instance.secure-health-check-url=</span><br><span class="line">#https通信端口</span><br><span class="line">eureka.instance.secure-port=443</span><br><span class="line">#https通信端口是否启用</span><br><span class="line">eureka.instance.secure-port-enabled=false</span><br><span class="line">#http通信端口</span><br><span class="line">eureka.instance.non-secure-port=80</span><br><span class="line">#http通信端口是否启用</span><br><span class="line">eureka.instance.non-secure-port-enabled=true</span><br><span class="line">#该实例的安全虚拟主机名称(https)</span><br><span class="line">eureka.instance.secure-virtual-host-name=unknown</span><br><span class="line">#该实例的虚拟主机名称(http)</span><br><span class="line">eureka.instance.virtual-host-name=unknown</span><br><span class="line">#该实例的状态呈现url,绝对路径</span><br><span class="line">eureka.instance.status-page-url=</span><br><span class="line">#该实例的状态呈现url,相对路径</span><br><span class="line">eureka.instance.status-page-url-path=/status</span><br></pre></td></tr></table></figure><h5 id="Eureka-client-配置"><a href="#Eureka-client-配置" class="headerlink" title="Eureka client 配置"></a>Eureka client 配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#该客户端是否可用</span><br><span class="line">eureka.client.enabled=true</span><br><span class="line">#实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">#此客户端是否获取eureka服务器注册表上的注册信息，默认为true</span><br><span class="line">eureka.client.fetch-registry=false</span><br><span class="line">#是否过滤掉，非UP的实例。默认为true</span><br><span class="line">eureka.client.filter-only-up-instances=true</span><br><span class="line">#与Eureka注册服务中心的通信zone和url地址</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line"></span><br><span class="line">#client连接Eureka服务端后的空闲等待时间，默认为30 秒</span><br><span class="line">eureka.client.eureka-connection-idle-timeout-seconds=30</span><br><span class="line">#client连接eureka服务端的连接超时时间，默认为5秒</span><br><span class="line">eureka.client.eureka-server-connect-timeout-seconds=5</span><br><span class="line">#client对服务端的读超时时长</span><br><span class="line">eureka.client.eureka-server-read-timeout-seconds=8</span><br><span class="line">#client连接all eureka服务端的总连接数，默认200</span><br><span class="line">eureka.client.eureka-server-total-connections=200</span><br><span class="line">#client连接eureka服务端的单机连接数量，默认50</span><br><span class="line">eureka.client.eureka-server-total-connections-per-host=50</span><br><span class="line">#执行程序指数回退刷新的相关属性，是重试延迟的最大倍数值，默认为10</span><br><span class="line">eureka.client.cache-refresh-executor-exponential-back-off-bound=10</span><br><span class="line">#执行程序缓存刷新线程池的大小，默认为5</span><br><span class="line">eureka.client.cache-refresh-executor-thread-pool-size=2</span><br><span class="line">#心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10</span><br><span class="line">eureka.client.heartbeat-executor-exponential-back-off-bound=10</span><br><span class="line">#心跳执行程序线程池的大小,默认为5</span><br><span class="line">eureka.client.heartbeat-executor-thread-pool-size=5</span><br><span class="line"># 询问Eureka服务url信息变化的频率（s），默认为300秒</span><br><span class="line">eureka.client.eureka-service-url-poll-interval-seconds=300</span><br><span class="line">#最初复制实例信息到eureka服务器所需的时间（s），默认为40秒</span><br><span class="line">eureka.client.initial-instance-info-replication-interval-seconds=40</span><br><span class="line">#间隔多长时间再次复制实例信息到eureka服务器，默认为30秒</span><br><span class="line">eureka.client.instance-info-replication-interval-seconds=30</span><br><span class="line">#从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒</span><br><span class="line">eureka.client.registry-fetch-interval-seconds=30</span><br><span class="line"></span><br><span class="line"># 获取实例所在的地区。默认为us-east-1</span><br><span class="line">eureka.client.region=us-east-1</span><br><span class="line">#实例是否使用同一zone里的eureka服务器，默认为true，理想状态下，eureka客户端与服务端是在同一zone下</span><br><span class="line">eureka.client.prefer-same-zone-eureka=true</span><br><span class="line"># 获取实例所在的地区下可用性的区域列表，用逗号隔开。（AWS）</span><br><span class="line">eureka.client.availability-zones.china=defaultZone,defaultZone1,defaultZone2</span><br><span class="line">#eureka服务注册表信息里的以逗号隔开的地区名单，如果不这样返回这些地区名单，则客户端启动将会出错。默认为null</span><br><span class="line">eureka.client.fetch-remote-regions-registry=</span><br><span class="line">#服务器是否能够重定向客户端请求到备份服务器。 如果设置为false，服务器将直接处理请求，如果设置为true，它可能发送HTTP重定向到客户端。默认为false</span><br><span class="line">eureka.client.allow-redirects=false</span><br><span class="line">#客户端数据接收</span><br><span class="line">eureka.client.client-data-accept=</span><br><span class="line">#增量信息是否可以提供给客户端看，默认为false</span><br><span class="line">eureka.client.disable-delta=false</span><br><span class="line">#eureka服务器序列化/反序列化的信息中获取“_”符号的的替换字符串。默认为“__“</span><br><span class="line">eureka.client.escape-char-replacement=__</span><br><span class="line">#eureka服务器序列化/反序列化的信息中获取“$”符号的替换字符串。默认为“_-”</span><br><span class="line">eureka.client.dollar-replacement=&quot;_-&quot;</span><br><span class="line">#当服务端支持压缩的情况下，是否支持从服务端获取的信息进行压缩。默认为true</span><br><span class="line">eureka.client.g-zip-content=true</span><br><span class="line">#是否记录eureka服务器和客户端之间在注册表的信息方面的差异，默认为false</span><br><span class="line">eureka.client.log-delta-diff=false</span><br><span class="line"># 如果设置为true,客户端的状态更新将会点播更新到远程服务器上，默认为true</span><br><span class="line">eureka.client.on-demand-update-status-change=true</span><br><span class="line">#此客户端只对一个单一的VIP注册表的信息感兴趣。默认为null</span><br><span class="line">eureka.client.registry-refresh-single-vip-address=</span><br><span class="line">#client是否在初始化阶段强行注册到服务中心，默认为false</span><br><span class="line">eureka.client.should-enforce-registration-at-init=false</span><br><span class="line">#client在shutdown的时候是否显示的注销服务从服务中心，默认为true</span><br><span class="line">eureka.client.should-unregister-on-shutdown=true</span><br><span class="line"></span><br><span class="line"># 获取eureka服务的代理主机，默认为null</span><br><span class="line">eureka.client.proxy-host=</span><br><span class="line">#获取eureka服务的代理密码，默认为null</span><br><span class="line">eureka.client.proxy-password=</span><br><span class="line"># 获取eureka服务的代理端口, 默认为null</span><br><span class="line">eureka.client.proxy-port=</span><br><span class="line"># 获取eureka服务的代理用户名，默认为null</span><br><span class="line">eureka.client.proxy-user-name=</span><br><span class="line"></span><br><span class="line">#属性解释器</span><br><span class="line">eureka.client.property-resolver=</span><br><span class="line">#获取实现了eureka客户端在第一次启动时读取注册表的信息作为回退选项的实现名称</span><br><span class="line">eureka.client.backup-registry-impl=</span><br><span class="line">#这是一个短暂的×××的配置，如果最新的×××是稳定的，则可以去除，默认为null</span><br><span class="line">eureka.client.decoder-name=</span><br><span class="line">#这是一个短暂的编码器的配置，如果最新的编码器是稳定的，则可以去除，默认为null</span><br><span class="line">eureka.client.encoder-name=</span><br><span class="line"></span><br><span class="line">#是否使用DNS机制去获取服务列表，然后进行通信。默认为false</span><br><span class="line">eureka.client.use-dns-for-fetching-service-urls=false</span><br><span class="line">#获取要查询的DNS名称来获得eureka服务器，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</span><br><span class="line">eureka.client.eureka-server-d-n-s-name=</span><br><span class="line">#获取eureka服务器的端口，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</span><br><span class="line">eureka.client.eureka-server-port=</span><br><span class="line">#表示eureka注册中心的路径，如果配置为eureka，则为http://x.x.x.x:x/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null</span><br><span class="line">eureka.client.eureka-server-u-r-l-context=</span><br></pre></td></tr></table></figure><h4 id="Eureka-Server配置"><a href="#Eureka-Server配置" class="headerlink" title="Eureka Server配置"></a>Eureka Server配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">################server 与 client 关联的配置#####################</span><br><span class="line">#服务端开启自我保护模式。无论什么情况，服务端都会保持一定数量的服务。避免client与server的网络问题，而出现大量的服务被清除。</span><br><span class="line">eureka.server.enable-self-preservation=true</span><br><span class="line">#开启清除无效服务的定时任务，时间间隔。默认1分钟</span><br><span class="line">eureka.server.eviction-interval-timer-in-ms= 60000</span><br><span class="line">#间隔多长时间，清除过期的delta数据</span><br><span class="line">eureka.server.delta-retention-timer-interval-in-ms=0</span><br><span class="line">#过期数据，是否也提供给client</span><br><span class="line">eureka.server.disable-delta=false</span><br><span class="line">#eureka服务端是否记录client的身份header</span><br><span class="line">eureka.server.log-identity-headers=true</span><br><span class="line">#请求频率限制器</span><br><span class="line">eureka.server.rate-limiter-burst-size=10</span><br><span class="line">#是否开启请求频率限制器</span><br><span class="line">eureka.server.rate-limiter-enabled=false</span><br><span class="line">#请求频率的平均值</span><br><span class="line">eureka.server.rate-limiter-full-fetch-average-rate=100</span><br><span class="line">#是否对标准的client进行频率请求限制。如果是false，则只对非标准client进行限制</span><br><span class="line">eureka.server.rate-limiter-throttle-standard-clients=false</span><br><span class="line">#注册服务、拉去服务列表数据的请求频率的平均值</span><br><span class="line">eureka.server.rate-limiter-registry-fetch-average-rate=500</span><br><span class="line">#设置信任的client list</span><br><span class="line">eureka.server.rate-limiter-privileged-clients=</span><br><span class="line">#在设置的时间范围类，期望与client续约的百分比。</span><br><span class="line">eureka.server.renewal-percent-threshold=0.85</span><br><span class="line">#多长时间更新续约的阈值</span><br><span class="line">eureka.server.renewal-threshold-update-interval-ms=0</span><br><span class="line">#对于缓存的注册数据，多长时间过期</span><br><span class="line">eureka.server.response-cache-auto-expiration-in-seconds=180</span><br><span class="line">#多长时间更新一次缓存中的服务注册数据</span><br><span class="line">eureka.server.response-cache-update-interval-ms=0</span><br><span class="line">#缓存增量数据的时间，以便在检索的时候不丢失信息</span><br><span class="line">eureka.server.retention-time-in-m-s-in-delta-queue=0</span><br><span class="line">#当时间戳不一致的时候，是否进行同步</span><br><span class="line">eureka.server.sync-when-timestamp-differs=true</span><br><span class="line">#是否采用只读缓存策略，只读策略对于缓存的数据不会过期。</span><br><span class="line">eureka.server.use-read-only-response-cache=true</span><br><span class="line"></span><br><span class="line">################server 自定义实现的配置#####################</span><br><span class="line">#json的转换的实现类名</span><br><span class="line">eureka.server.json-codec-name=</span><br><span class="line">#PropertyResolver</span><br><span class="line">eureka.server.property-resolver=</span><br><span class="line">#eureka server xml的编解码实现名称</span><br><span class="line">eureka.server.xml-codec-name=</span><br><span class="line"></span><br><span class="line">################server node 与 node 之间关联的配置#####################</span><br><span class="line">#发送复制数据是否在request中，总是压缩</span><br><span class="line">eureka.server.enable-replicated-request-compression=false</span><br><span class="line">#指示群集节点之间的复制是否应批处理以提高网络效率。</span><br><span class="line">eureka.server.batch-replication=false</span><br><span class="line">#允许备份到备份池的最大复制事件数量。而这个备份池负责除状态更新的其他事件。可以根据内存大小，超时和复制流量，来设置此值得大小</span><br><span class="line">eureka.server.max-elements-in-peer-replication-pool=10000</span><br><span class="line">#允许备份到状态备份池的最大复制事件数量</span><br><span class="line">eureka.server.max-elements-in-status-replication-pool=10000</span><br><span class="line">#多个服务中心相互同步信息线程的最大空闲时间</span><br><span class="line">eureka.server.max-idle-thread-age-in-minutes-for-peer-replication=15</span><br><span class="line">#状态同步线程的最大空闲时间</span><br><span class="line">eureka.server.max-idle-thread-in-minutes-age-for-status-replication=15</span><br><span class="line">#服务注册中心各个instance相互复制数据的最大线程数量</span><br><span class="line">eureka.server.max-threads-for-peer-replication=20</span><br><span class="line">#服务注册中心各个instance相互复制状态数据的最大线程数量</span><br><span class="line">eureka.server.max-threads-for-status-replication=1</span><br><span class="line">#instance之间复制数据的通信时长</span><br><span class="line">eureka.server.max-time-for-replication=30000</span><br><span class="line">#正常的对等服务instance最小数量。-1表示服务中心为单节点。</span><br><span class="line">eureka.server.min-available-instances-for-peer-replication=-1</span><br><span class="line">#instance之间相互复制开启的最小线程数量</span><br><span class="line">eureka.server.min-threads-for-peer-replication=5</span><br><span class="line">#instance之间用于状态复制，开启的最小线程数量</span><br><span class="line">eureka.server.min-threads-for-status-replication=1</span><br><span class="line">#instance之间复制数据时可以重试的次数</span><br><span class="line">eureka.server.number-of-replication-retries=5</span><br><span class="line">#eureka节点间间隔多长时间更新一次数据。默认10分钟。</span><br><span class="line">eureka.server.peer-eureka-nodes-update-interval-ms=600000</span><br><span class="line">#eureka服务状态的相互更新的时间间隔。</span><br><span class="line">eureka.server.peer-eureka-status-refresh-time-interval-ms=0</span><br><span class="line">#eureka对等节点间连接超时时间</span><br><span class="line">eureka.server.peer-node-connect-timeout-ms=200</span><br><span class="line">#eureka对等节点连接后的空闲时间</span><br><span class="line">eureka.server.peer-node-connection-idle-timeout-seconds=30</span><br><span class="line">#节点间的读数据连接超时时间</span><br><span class="line">eureka.server.peer-node-read-timeout-ms=200</span><br><span class="line">#eureka server 节点间连接的总共最大数量</span><br><span class="line">eureka.server.peer-node-total-connections=1000</span><br><span class="line">#eureka server 节点间连接的单机最大数量</span><br><span class="line">eureka.server.peer-node-total-connections-per-host=10</span><br><span class="line">#在服务节点启动时，eureka尝试获取注册信息的次数</span><br><span class="line">eureka.server.registry-sync-retries=</span><br><span class="line">#在服务节点启动时，eureka多次尝试获取注册信息的间隔时间</span><br><span class="line">eureka.server.registry-sync-retry-wait-ms=</span><br><span class="line">#当eureka server启动的时候，不能从对等节点获取instance注册信息的情况，应等待多长时间。</span><br><span class="line">eureka.server.wait-time-in-ms-when-sync-empty=0</span><br><span class="line"></span><br><span class="line">################server 与 remote 关联的配置#####################</span><br><span class="line">#过期数据，是否也提供给远程region</span><br><span class="line">eureka.server.disable-delta-for-remote-regions=false</span><br><span class="line">#回退到远程区域中的应用程序的旧行为 (如果已配置) 如果本地区域中没有该应用程序的实例, 则将被禁用。</span><br><span class="line">eureka.server.disable-transparent-fallback-to-other-region=false</span><br><span class="line">#指示在服务器支持的情况下, 是否必须为远程区域压缩从尤里卡服务器获取的内容。</span><br><span class="line">eureka.server.g-zip-content-from-remote-region=true</span><br><span class="line">#连接eureka remote note的连接超时时间</span><br><span class="line">eureka.server.remote-region-connect-timeout-ms=1000</span><br><span class="line">#remote region 应用白名单</span><br><span class="line">eureka.server.remote-region-app-whitelist.</span><br><span class="line">#连接eureka remote note的连接空闲时间</span><br><span class="line">eureka.server.remote-region-connection-idle-timeout-seconds=30</span><br><span class="line">#执行remote region 获取注册信息的请求线程池大小</span><br><span class="line">eureka.server.remote-region-fetch-thread-pool-size=20</span><br><span class="line">#remote region 从对等eureka加点读取数据的超时时间</span><br><span class="line">eureka.server.remote-region-read-timeout-ms=1000</span><br><span class="line">#从remote region 获取注册信息的时间间隔</span><br><span class="line">eureka.server.remote-region-registry-fetch-interval=30</span><br><span class="line">#remote region 连接eureka节点的总连接数量</span><br><span class="line">eureka.server.remote-region-total-connections=1000</span><br><span class="line">#remote region 连接eureka节点的单机连接数量</span><br><span class="line">eureka.server.remote-region-total-connections-per-host=50</span><br><span class="line">#remote region抓取注册信息的存储文件，而这个可靠的存储文件需要全限定名来指定</span><br><span class="line">eureka.server.remote-region-trust-store=</span><br><span class="line">#remote region 储存的文件的密码</span><br><span class="line">eureka.server.remote-region-trust-store-password=</span><br><span class="line">#remote region url.多个逗号隔开</span><br><span class="line">eureka.server.remote-region-urls=</span><br><span class="line">#remote region url.多个逗号隔开</span><br><span class="line">eureka.server.remote-region-urls-with-name.</span><br><span class="line"></span><br><span class="line">################server 与 ASG/AWS/EIP/route52 之间关联的配置#####################</span><br><span class="line">#缓存ASG信息的过期时间。</span><br><span class="line">eureka.server.a-s-g-cache-expiry-timeout-ms=0</span><br><span class="line">#查询ASG信息的超时时间</span><br><span class="line">eureka.server.a-s-g-query-timeout-ms=300</span><br><span class="line">#服务更新ASG信息的频率</span><br><span class="line">eureka.server.a-s-g-update-interval-ms=0</span><br><span class="line">#AWS访问ID</span><br><span class="line">eureka.server.a-w-s-access-id=</span><br><span class="line">#AWS安全密钥</span><br><span class="line">eureka.server.a-w-s-secret-key=</span><br><span class="line">#AWS绑定策略</span><br><span class="line">eureka.server.binding-strategy=eip</span><br><span class="line">#用于从第三方AWS 帐户描述自动扩展分组的角色的名称。</span><br><span class="line">eureka.server.list-auto-scaling-groups-role-name=</span><br><span class="line">#是否应该建立连接引导</span><br><span class="line">eureka.server.prime-aws-replica-connections=true</span><br><span class="line">#服务端尝试绑定候选EIP的次数</span><br><span class="line">eureka.server.e-i-p-bind-rebind-retries=3</span><br><span class="line">#服务端绑定EIP的时间间隔.如果绑定就检查;如果绑定失效就重新绑定。当且仅当已经绑定的情况</span><br><span class="line">eureka.server.e-i-p-binding-retry-interval-ms=10</span><br><span class="line">#服务端绑定EIP的时间间隔.当且仅当服务为绑定的情况</span><br><span class="line">eureka.server.e-i-p-binding-retry-interval-ms-when-unbound=</span><br><span class="line">#服务端尝试绑定route53的次数</span><br><span class="line">eureka.server.route53-bind-rebind-retries=3</span><br><span class="line">#服务端间隔多长时间尝试绑定route53</span><br><span class="line">eureka.server.route53-binding-retry-interval-ms=30</span><br><span class="line">#</span><br><span class="line">eureka.server.route53-domain-t-t-l=10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;springCloud-Eureka-配置&quot;&gt;&lt;a href=&quot;#springCloud-Eureka-配置&quot; class=&quot;headerlink&quot; title=&quot;springCloud_Eureka_配置&quot;&gt;&lt;/a&gt;springCloud_Eureka_配置&lt;/
      
    
    </summary>
    
    
      <category term="springCloud eureka" scheme="http://yoursite.com/tags/springCloud-eureka/"/>
    
  </entry>
  
  <entry>
    <title>linux新增磁盘</title>
    <link href="http://yoursite.com/2019/11/26/linux%E6%96%B0%E5%A2%9E%E7%A3%81%E7%9B%98/"/>
    <id>http://yoursite.com/2019/11/26/linux新增磁盘/</id>
    <published>2019-11-26T03:50:08.000Z</published>
    <updated>2019-11-26T05:34:20.850Z</updated>
    
    <content type="html"><![CDATA[<h4 id="linux新增磁盘"><a href="#linux新增磁盘" class="headerlink" title="linux新增磁盘"></a>linux新增磁盘</h4><blockquote><p> 查看现在已有的分区状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df –l</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 查看服务器安装的硬盘状态（包括格式化和未格式化）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk –l</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>添加新分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br><span class="line">按照以下红框输入</span><br><span class="line"></span><br><span class="line">N 回车</span><br><span class="line"></span><br><span class="line">P 回车</span><br><span class="line"></span><br><span class="line">1 回车</span><br><span class="line"></span><br><span class="line">两次回车</span><br><span class="line"></span><br><span class="line">W 回车</span><br><span class="line">用以下命令查看分区</span><br><span class="line"></span><br><span class="line">fdisk –l</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>格式化分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkfs -t ext4 -c /dev/sdb1</span><br><span class="line">-t 制定要把磁盘格式化成什么类型</span><br><span class="line">-c 在建立文件系统之前检查坏道，可能会很费时间，新硬盘一般不需要</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>   挂载新硬盘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在根目录下，建一个文件夹，待会将分区挂载在这个文件夹上，以后要往新硬盘存东西就存在新建文件夹下就可以了。</span><br><span class="line"></span><br><span class="line"># mkdir /ssd</span><br><span class="line"></span><br><span class="line">挂载硬盘</span><br><span class="line"></span><br><span class="line"># mount /dev/sdb1 /ssd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 让系统开机自动挂载这块硬盘</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;/dev/sda1 /ssd ext4 defaults 0 0&quot;&gt;&gt;/etc/fstaba</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;linux新增磁盘&quot;&gt;&lt;a href=&quot;#linux新增磁盘&quot; class=&quot;headerlink&quot; title=&quot;linux新增磁盘&quot;&gt;&lt;/a&gt;linux新增磁盘&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; 查看现在已有的分区状态&lt;br&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux防火墙开启测试</title>
    <link href="http://yoursite.com/2019/11/21/linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/11/21/linux防火墙开启测试/</id>
    <published>2019-11-21T01:36:24.000Z</published>
    <updated>2019-11-21T01:48:28.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux防火墙开启"><a href="#linux防火墙开启" class="headerlink" title="linux防火墙开启"></a>linux防火墙开启</h3><p>1、防火墙</p><blockquote><p>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，google之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</p></blockquote><ol><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><ol start="4"><li>查看当前firewall状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><ol start="5"><li>重启firewall</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol start="6"><li>禁止开机启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></li></ol><h4 id="2、开启端口"><a href="#2、开启端口" class="headerlink" title="2、开启端口"></a>2、开启端口</h4><ol><li><p>查看已经开放的端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></li><li><p>开启端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></li></ol><p>命令含义：</p><p>–zone #作用域</p><p>–add-port=80/tcp  #添加端口，格式为：端口/通讯协议</p><p>–permanent  #永久生效，没有此参数重启后失效</p><p>开启断绝口后需要重启防火墙</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;linux防火墙开启&quot;&gt;&lt;a href=&quot;#linux防火墙开启&quot; class=&quot;headerlink&quot; title=&quot;linux防火墙开启&quot;&gt;&lt;/a&gt;linux防火墙开启&lt;/h3&gt;&lt;p&gt;1、防火墙&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CentOS升级到7之后
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>更改gitlab clone的external_url</title>
    <link href="http://yoursite.com/2019/11/20/%E6%9B%B4%E6%94%B9gitlab-clone%E7%9A%84external-url/"/>
    <id>http://yoursite.com/2019/11/20/更改gitlab-clone的external-url/</id>
    <published>2019-11-20T11:01:19.000Z</published>
    <updated>2019-11-20T11:03:09.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更改gitlab-clone的external-url"><a href="#更改gitlab-clone的external-url" class="headerlink" title="更改gitlab clone的external_url"></a>更改gitlab clone的external_url</h3><p>在安装gitlab，新建项目之后，默认的clone链接为<a href="mailto:git@gitlab.example" target="_blank" rel="noopener">git@gitlab.example</a>:test/test.git，http也是gitlab.example这种的<br>这样每次clone时候都需要手动改下，改成ip或者域名才可以，<br>可以按照如下方式更改external_url，</p><p>直接更改/etc/gitlab/gitlab.rb不能生效，更改/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml文件(centos7)中<br>host和port即可<br>host可以换成域名，port更改为gitlab服务的端口，这里不设置的话在clone http url时候还是不行，需要把端口加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br><span class="line">  # 1. GitLab app settings</span><br><span class="line">  # ==========================</span><br><span class="line"></span><br><span class="line">  ## GitLab settings</span><br><span class="line">  gitlab:</span><br><span class="line">    ## Web server settings (note: host is the FQDN, do not include http://)</span><br><span class="line">    host: 10.119.116.160</span><br><span class="line">    port: 8181</span><br><span class="line">    https: false</span><br></pre></td></tr></table></figure><p>更改后clone的external_url后执行gitlab-ctl restart，重新进入gitlab就生效了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;更改gitlab-clone的external-url&quot;&gt;&lt;a href=&quot;#更改gitlab-clone的external-url&quot; class=&quot;headerlink&quot; title=&quot;更改gitlab clone的external_url&quot;&gt;&lt;/a&gt;更改git
      
    
    </summary>
    
    
      <category term="gitLab" scheme="http://yoursite.com/tags/gitLab/"/>
    
  </entry>
  
  <entry>
    <title>mideng</title>
    <link href="http://yoursite.com/2019/11/19/mideng/"/>
    <id>http://yoursite.com/2019/11/19/mideng/</id>
    <published>2019-11-19T08:35:50.000Z</published>
    <updated>2019-11-19T08:37:13.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口幂等性适用场景及设计方法"><a href="#接口幂等性适用场景及设计方法" class="headerlink" title="接口幂等性适用场景及设计方法"></a>接口幂等性适用场景及设计方法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;接口幂等性适用场景及设计方法&quot;&gt;&lt;a href=&quot;#接口幂等性适用场景及设计方法&quot; class=&quot;headerlink&quot; title=&quot;接口幂等性适用场景及设计方法&quot;&gt;&lt;/a&gt;接口幂等性适用场景及设计方法&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;mysql查看锁&#39;</title>
    <link href="http://yoursite.com/2019/09/12/mysql%E6%9F%A5%E7%9C%8B%E9%94%81/"/>
    <id>http://yoursite.com/2019/09/12/mysql查看锁/</id>
    <published>2019-09-12T03:26:51.000Z</published>
    <updated>2019-09-12T03:29:56.174Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mysql查看锁-释放锁"><a href="#mysql查看锁-释放锁" class="headerlink" title="mysql查看锁,释放锁"></a>mysql查看锁,释放锁</h4><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ol><li>查询是否锁表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show OPEN TABLES where In_use &gt; 0;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show processlist</span><br></pre></td></tr></table></figure><ol start="3"><li>杀死进程id（就是上面命令的id列）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill id</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><ol><li>查看下在锁的事务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure><ol start="2"><li>杀死进程id（就是上面命令的trx_mysql_thread_id列）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 线程ID</span><br></pre></td></tr></table></figure><p>例子：</p><p>查出死锁进程：SHOW PROCESSLIST<br>杀掉进程          KILL 420821;</p><p>其它关于查看死锁的命令：</p><ol><li><p>查看当前的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure></li><li><p>查看当前锁定的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure></li><li><p>查看当前等锁的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mysql查看锁-释放锁&quot;&gt;&lt;a href=&quot;#mysql查看锁-释放锁&quot; class=&quot;headerlink&quot; title=&quot;mysql查看锁,释放锁&quot;&gt;&lt;/a&gt;mysql查看锁,释放锁&lt;/h4&gt;&lt;h2 id=&quot;第一种&quot;&gt;&lt;a href=&quot;#第一种&quot; class
      
    
    </summary>
    
    
      <category term="mysql ,锁" scheme="http://yoursite.com/tags/mysql-%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>idea_highlight</title>
    <link href="http://yoursite.com/2019/08/08/idea-highlight/"/>
    <id>http://yoursite.com/2019/08/08/idea-highlight/</id>
    <published>2019-08-08T01:45:48.000Z</published>
    <updated>2019-08-08T01:46:36.037Z</updated>
    
    <content type="html"><![CDATA[<h4 id="idea-高亮显示"><a href="#idea-高亮显示" class="headerlink" title="idea 高亮显示"></a>idea 高亮显示</h4><p>依次修改File-settings-Editor-Color Scheme-General菜单下的Code-Identifier under caret和Identifier under caret(write)的Backgroud色值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;idea-高亮显示&quot;&gt;&lt;a href=&quot;#idea-高亮显示&quot; class=&quot;headerlink&quot; title=&quot;idea 高亮显示&quot;&gt;&lt;/a&gt;idea 高亮显示&lt;/h4&gt;&lt;p&gt;依次修改File-settings-Editor-Color Scheme-Gene
      
    
    </summary>
    
    
      <category term="hightLight" scheme="http://yoursite.com/tags/hightLight/"/>
    
  </entry>
  
  <entry>
    <title>spring_factoryBean</title>
    <link href="http://yoursite.com/2019/07/28/spring-factoryBean/"/>
    <id>http://yoursite.com/2019/07/28/spring-factoryBean/</id>
    <published>2019-07-28T04:20:16.000Z</published>
    <updated>2019-07-28T04:27:02.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring-factoryBean"><a href="#spring-factoryBean" class="headerlink" title="spring factoryBean"></a>spring factoryBean</h3><blockquote><p>Monkey<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package com.melon.app.bean;</span><br><span class="line">public class Monkey &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>MelonFactoryBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.melon.app.config;</span><br><span class="line"></span><br><span class="line">import com.melon.app.bean.Monkey;</span><br><span class="line">import org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line">public class MelonFactoryBean implements FactoryBean&lt;Monkey&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Monkey getObject() throws Exception &#123;</span><br><span class="line">        return new Monkey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        return Monkey.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isSingleton() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>@Configuration<br>@Import(value = {MelonImportSelector.class,MelonImportBeanDefinitionRegistrar.class})<br>public class MyImportConfigureation {</p><pre><code>@Beanpublic MelonFactoryBean melonFactoryBean(){    return  new MelonFactoryBean();}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">````</span><br><span class="line"> ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MyImportConfigureation.class);</span><br><span class="line">    String[] str=  applicationContext.getBeanDefinitionNames();</span><br><span class="line">    Object bean1 = applicationContext.getBean(&quot;melonFactoryBean&quot;);</span><br><span class="line">    System.out.println(bean1.getClass());</span><br></pre></td></tr></table></figure></p><p>结果如下</p><pre><code>class com.melon.app.bean.Monkeyorg.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymyImportConfigureationcom.melon.app.bean.Catcom.melon.app.bean.DogmelonFactoryBeanpig</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;spring-factoryBean&quot;&gt;&lt;a href=&quot;#spring-factoryBean&quot; class=&quot;headerlink&quot; title=&quot;spring factoryBean&quot;&gt;&lt;/a&gt;spring factoryBean&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring_import</title>
    <link href="http://yoursite.com/2019/07/28/spring-import/"/>
    <id>http://yoursite.com/2019/07/28/spring-import/</id>
    <published>2019-07-28T03:35:44.000Z</published>
    <updated>2019-07-28T03:59:21.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-import"><a href="#spring-import" class="headerlink" title="spring import"></a>spring import</h2><h3 id="Import标签使用"><a href="#Import标签使用" class="headerlink" title="@Import标签使用"></a>@Import标签使用</h3><ol><li>一般基本的用import标签使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Import(value = &#123;Dog.class&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>2.实现import接口</p><blockquote><p>Cat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package com.melon.app.bean;</span><br><span class="line">public class Cat &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Dog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package com.melon.app.bean;</span><br><span class="line">public class Dog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>MelonImportSelector实现spring提供的接口<br>package com.melon.app.config;</p></blockquote><p>import org.springframework.context.annotation.ImportSelector;<br>import org.springframework.core.type.AnnotationMetadata;</p><p>public class MelonImportSelector implements ImportSelector {<br>    public String[] selectImports(AnnotationMetadata importingClassMetadata) {<br>        return new String[]{“com.melon.app.bean.Cat”,”com.melon.app.bean.Dog”};<br>    }<br>}</p><blockquote><p>MyImportConfigureation 配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(value = &#123;MelonImportSelector.class&#125;)</span><br><span class="line">public class MyImportConfigureation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>测试扫描出来的bean结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">myImportConfigureation</span><br><span class="line">com.melon.app.bean.Cat</span><br><span class="line">com.melon.app.bean.Dog</span><br></pre></td></tr></table></figure></p></blockquote><ol start="3"><li>importBeanDefintionRegister<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MelonImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param importingClassMetadata 当前类的注解信息</span><br><span class="line">     * @param registry beanDefinition注册类</span><br><span class="line">     *    把所有需要添加到容器中的bean加入。</span><br><span class="line">     */</span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        boolean bean1 = registry.containsBeanDefinition(&quot;com.melon.app.bean.Dog&quot;);</span><br><span class="line">        boolean bean2= registry.containsBeanDefinition(&quot;com.melon.app.bean.Cat&quot;);</span><br><span class="line">        //如果Dog和Cat同时存在于我们IOC容器中，那么创建Pig类，加入到容器</span><br><span class="line">        //对于我们要注册的bean,给bean进行封装，</span><br><span class="line">        if(bean1 &amp;&amp; bean2) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = new RootBeanDefinition(Pig.class);</span><br><span class="line">            registry.registerBeanDefinition(&quot;pig&quot;,beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(value = &#123;MelonImportSelector.class,MelonImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line">public class MyImportConfigureation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扫描注册bean结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">myImportConfigureation</span><br><span class="line">com.melon.app.bean.Cat</span><br><span class="line">com.melon.app.bean.Dog</span><br><span class="line">pig</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-import&quot;&gt;&lt;a href=&quot;#spring-import&quot; class=&quot;headerlink&quot; title=&quot;spring import&quot;&gt;&lt;/a&gt;spring import&lt;/h2&gt;&lt;h3 id=&quot;Import标签使用&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="import" scheme="http://yoursite.com/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>spring_basic</title>
    <link href="http://yoursite.com/2019/07/27/spring-basic/"/>
    <id>http://yoursite.com/2019/07/27/spring-basic/</id>
    <published>2019-07-27T13:32:09.000Z</published>
    <updated>2019-07-27T14:04:06.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring基础"><a href="#spring基础" class="headerlink" title="spring基础"></a>spring基础</h3><p>###@Componet####</p><ol><li>@RestController @Service 注解等都是基于@component<br>###@componentScan 源码中的useDefaultFilter####<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(value = &quot;com.melon.app&quot;,</span><br><span class="line">        includeFilters =&#123;@ComponentScan.Filter(type =</span><br><span class="line">                FilterType.CUSTOM,classes = &#123;MyTypeFilter.class&#125;)&#125;,</span><br><span class="line">        useDefaultFilters = false)</span><br></pre></td></tr></table></figure></li></ol><p>其中useDefaultFilters为何要设置false的原因就是如果不设置都会扫描@component注解的类<br>源码分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext-&gt;AbstractApplicationContext.refresh() </span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">// 调用后置拦截器</span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">// Register bean processors that intercept bean creation.</span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line">````</span><br><span class="line">&gt;AbstractApplicationContextprotected</span><br></pre></td></tr></table></figure></p><p>void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//调用后置拦截器</span><br><span class="line">&gt;&gt; PostProcessorRegistrationDelegate</span><br></pre></td></tr></table></figure></p><p>-&gt;invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());<br> -&gt;invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);<br>  -&gt;for (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) {<br>            postProcessor.postProcessBeanDefinitionRegistry(registry);<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ConfigureClassPostProcessor</span><br></pre></td></tr></table></figure></p><p> -&gt;postProcessBeanDefinitionRegistry<br>  -&gt;processConfigBeanDefinitions<br>    -&gt; parser.parse(candidates);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ConfigureClassParser</span><br></pre></td></tr></table></figure></p><p> -&gt;parse(Set<beandefinitionholder> configCandidates)<br>  -&gt;if (bd instanceof AnnotatedBeanDefinition) {<br>      parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());<br>    }<br>    -&gt;parse(AnnotationMetadata metadata, String beanName)<br>     -&gt;processConfigurationClass(ConfigurationClass configClass)<br>      -&gt; doProcessConfigurationClass(configClass, sourceClass);<br>       -&gt;Set<beandefinitionholder> scannedBeanDefinitions =<br>        this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ComponentScanAnnotationParser</span><br></pre></td></tr></table></figure></beandefinitionholder></beandefinitionholder></p><p>   -&gt;parse(AnnotationAttributes componentScan, final String declaringClass)<br>    -&gt;ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(this.registry,<br>                componentScan.getBoolean(“useDefaultFilters”), this.environment, this.resourceLoader);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ClassPathBeanDefinitionScanner</span><br></pre></td></tr></table></figure></p><p>  -&gt;ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,<br>            Environment environment, @Nullable ResourceLoader resourceLoader)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,</span><br><span class="line">Environment environment, @Nullable ResourceLoader resourceLoader) &#123;</span><br><span class="line"></span><br><span class="line">Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">this.registry = registry;</span><br><span class="line"></span><br><span class="line">if (useDefaultFilters) &#123;</span><br><span class="line">registerDefaultFilters();</span><br><span class="line">&#125;</span><br><span class="line">setEnvironment(environment);</span><br><span class="line">setResourceLoader(resourceLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>ClassPathScanningCandidateComponentProvider<br>····<br>protected void registerDefaultFilters() {<br>       //默认情况下会扫描所有注解是component的类<br>        this.includeFilters.add(new AnnotationTypeFilter(Component.class));<br>        ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();<br>        try {<br>            this.includeFilters.add(new AnnotationTypeFilter(<br>                    ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(“javax.annotation.ManagedBean”, cl)), false));<br>            logger.trace(“JSR-250 ‘javax.annotation.ManagedBean’ found and supported for component scanning”);<br>        }<br>        catch (ClassNotFoundException ex) {<br>            // JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.<br>        }<br>        try {<br>            this.includeFilters.add(new AnnotationTypeFilter(<br>                    ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(“javax.inject.Named”, cl)), false));<br>            logger.trace(“JSR-330 ‘javax.inject.Named’ annotation found and supported for component scanning”);<br>        }<br>        catch (ClassNotFoundException ex) {<br>            // JSR-330 API not available - simply skip.<br>        }<br>    }<br><code></code>    </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;spring基础&quot;&gt;&lt;a href=&quot;#spring基础&quot; class=&quot;headerlink&quot; title=&quot;spring基础&quot;&gt;&lt;/a&gt;spring基础&lt;/h3&gt;&lt;p&gt;###@Componet####&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@RestController 
      
    
    </summary>
    
    
      <category term="spring基础" scheme="http://yoursite.com/tags/spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>springboot_annotation</title>
    <link href="http://yoursite.com/2019/07/20/springboot-annotation/"/>
    <id>http://yoursite.com/2019/07/20/springboot-annotation/</id>
    <published>2019-07-20T13:10:32.000Z</published>
    <updated>2019-07-20T14:07:14.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="springBoot-Configuration-Lazy"><a href="#springBoot-Configuration-Lazy" class="headerlink" title="springBoot @Configuration  @Lazy"></a>springBoot @Configuration  @Lazy</h3><h4 id="ComponentScan-使用"><a href="#ComponentScan-使用" class="headerlink" title="@ComponentScan 使用"></a>@ComponentScan 使用</h4><p>ComponentScan 就是基本的扫描spring的注解包<br>注意点:如果要用到springboot的Filters属性，那么需要把useDefaultFilters设置成false,否则filter失效<br>@ComponentScan(value=”com.melon.web”,<br>includeFilters={@Filters(type=FilterType.ANNOTATION,classes={Controller.class}},<br>useDefaultFilters=false)</p><p>如果useDefaultFilters不设置false，那么includeFilters就不生效，走的是默认的配置，<br>所以一般情况下你要用到Filter就要设置useDefaultFilters=false<br>FilterType默认按注解过滤</p><ol><li>指定注解类型比如@Controller<blockquote><blockquote><p>@Filters(type=FilterType.ANNOTATION,classes={Controller.class} </p></blockquote></blockquote></li><li>过滤指明具体类<blockquote><blockquote><p>@Filters(type=FilterType.ASSIGNABLE_TYPE,classes={MyController.class}</p></blockquote></blockquote></li><li>自定义类型<blockquote><blockquote><p>@Filters(type=FilterType.CUSTOM,classes={MyFilter.class}</p></blockquote></blockquote></li></ol><blockquote><p>MyFilter 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class MyTypeFilter implements TypeFilter &#123;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param metadataReader 读取当前正在扫描类的信息</span><br><span class="line">     * @param metadataReaderFactory 可以获取到其他任何类信息</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123;</span><br><span class="line">        //获取当前类注解的信息</span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        //获取扫描类的信息</span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        //获取扫描类资源(类路径)</span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line">        if(classMetadata.getClassName().contains(&quot;Order&quot;))&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><p>@Lazy主要跟@Bean搭配，专门针对单列bean,容器起来时候不加载,不生成bean<br>等去getBean的时候再去加载，生成bean</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;springBoot-Configuration-Lazy&quot;&gt;&lt;a href=&quot;#springBoot-Configuration-Lazy&quot; class=&quot;headerlink&quot; title=&quot;springBoot @Configuration  @Lazy&quot;&gt;
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>python_db</title>
    <link href="http://yoursite.com/2019/04/26/python-db/"/>
    <id>http://yoursite.com/2019/04/26/python-db/</id>
    <published>2019-04-26T09:14:59.000Z</published>
    <updated>2019-04-30T01:42:15.723Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import cx_Oracle</span><br><span class="line">import os</span><br><span class="line">try:</span><br><span class="line">    os.environ[&apos;NLS_LANG&apos;] = &apos;SIMPLIFIED CHINESE_CHINA.utf8&apos;</span><br><span class="line">    db = cx_Oracle.connect(&apos;数据库用户名&apos;, &apos;数据库密码&apos;, &apos;数据库IP地址/数据库实例&apos;)</span><br><span class="line">    c = db.cursor()</span><br><span class="line">    ##读取SQL文件,获得sql语句的list</span><br><span class="line">    with open(u&apos;E:\\test.sql&apos;, &apos;r+&apos;) as f:</span><br><span class="line">        sql_list = f.read().split(&apos;;&apos;)[:-1]  # sql文件最后一行加上;</span><br><span class="line">        sql_list = [x.replace(&apos;\n&apos;, &apos; &apos;) if &apos;\n&apos; in x else x for x in sql_list]  # 将每段sql里的换行符改成空格</span><br><span class="line">    ##执行sql语句，使用循环执行sql语句</span><br><span class="line">    for sql_item  in sql_list:</span><br><span class="line">        # print (sql_item)</span><br><span class="line">        c.execute(sql_item)</span><br><span class="line">except cx_Oracle.Error as e:</span><br><span class="line">    print e</span><br><span class="line">finally:</span><br><span class="line">    c.close()</span><br><span class="line">    db.commit()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>oracle编码问题<br>importlib.reload(sys)<br>os.environ[‘NLS_LANG’] = ‘SIMPLIFIED CHINESE_CHINA.UTF8’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/16/hello-world/"/>
    <id>http://yoursite.com/2019/04/16/hello-world/</id>
    <published>2019-04-16T05:55:15.718Z</published>
    <updated>2019-04-16T05:55:15.719Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apollo</title>
    <link href="http://yoursite.com/2019/04/16/apollo/"/>
    <id>http://yoursite.com/2019/04/16/apollo/</id>
    <published>2019-04-16T03:57:23.000Z</published>
    <updated>2019-04-16T03:57:51.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="apollo"><a href="#apollo" class="headerlink" title="apollo"></a>apollo</h3><p>apollo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;apollo&quot;&gt;&lt;a href=&quot;#apollo&quot; class=&quot;headerlink&quot; title=&quot;apollo&quot;&gt;&lt;/a&gt;apollo&lt;/h3&gt;&lt;p&gt;apollo&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="apollo" scheme="http://yoursite.com/tags/apollo/"/>
    
  </entry>
  
  <entry>
    <title>jenkins_jacoco</title>
    <link href="http://yoursite.com/2019/01/31/jenkins-jacoco/"/>
    <id>http://yoursite.com/2019/01/31/jenkins-jacoco/</id>
    <published>2019-01-31T01:49:42.000Z</published>
    <updated>2019-01-31T01:50:43.466Z</updated>
    
    <content type="html"><![CDATA[<h4 id="jekins-jacoco"><a href="#jekins-jacoco" class="headerlink" title="jekins jacoco"></a>jekins jacoco</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.melon&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;fenmi&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;fenmi&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project&apos;s website --&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.jacoco&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.8.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;!-- jacoco plugin --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.7.9&lt;/version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;!-- 在maven的initialize阶段，将Jacoco的runtime agent作为VM的一个参数 传给被测程序，用于监控JVM中的调用。 --&gt;</span><br><span class="line">            &lt;id&gt;default-prepare-agent&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;prepare-agent&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">              &lt;destFile&gt;</span><br><span class="line">                $&#123;project.build.directory&#125;/coverage-reports/jacoco.exec</span><br><span class="line">              &lt;/destFile&gt;</span><br><span class="line">              &lt;propertyName&gt;surefireArgLine&lt;/propertyName&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">          &lt;!-- 在程序的verify阶段，执行report测试的程序。 文件的输入为perpare-agent阶段中设置或者默认的jacoco.exec.</span><br><span class="line">              参数 includes和excludes可用来选定report中过滤的类。 --&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;default-report&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;test&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;report&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">              &lt;dataFile&gt;$&#123;project.build.directory&#125;/coverage-reports/jacoco.exec&lt;/dataFile&gt;</span><br><span class="line">              &lt;outputDirectory&gt;$&#123;project.reporting.outputDirectory&#125;/jacoco&lt;/outputDirectory&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;!-- 使用 maven-surefire-plugin来执行单元测试。 将surefireArgLine赋值给argLine参数，以保证在测试执行时Jacoco</span><br><span class="line">          agent处于运行状态。 --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.19.1&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;argLine&gt;$&#123;surefireArgLine&#125;&lt;/argLine&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;jekins-jacoco&quot;&gt;&lt;a href=&quot;#jekins-jacoco&quot; class=&quot;headerlink&quot; title=&quot;jekins jacoco&quot;&gt;&lt;/a&gt;jekins jacoco&lt;/h4&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="jenkins" scheme="http://yoursite.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>docker_jenkins</title>
    <link href="http://yoursite.com/2019/01/29/docker-jenkins/"/>
    <id>http://yoursite.com/2019/01/29/docker-jenkins/</id>
    <published>2019-01-29T02:10:20.000Z</published>
    <updated>2019-01-29T08:01:23.003Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker-jenkins"><a href="#docker-jenkins" class="headerlink" title="docker jenkins"></a>docker jenkins</h4><h5 id="1拉取镜像"><a href="#1拉取镜像" class="headerlink" title="1拉取镜像"></a>1拉取镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinsci/jenkins</span><br></pre></td></tr></table></figure><h5 id="2根据镜像启动容器"><a href="#2根据镜像启动容器" class="headerlink" title="2根据镜像启动容器"></a>2根据镜像启动容器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 50000:50000 jenkinsci/jenkins</span><br></pre></td></tr></table></figure><h5 id="3根据提示去查需要初始的密码"><a href="#3根据提示去查需要初始的密码" class="headerlink" title="3根据提示去查需要初始的密码"></a>3根据提示去查需要初始的密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 015fad435af29056b08298af455c9dba0f1289be5e03588022736018a1610d70 bash </span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><h5 id="4根据界面提示去安装插件"><a href="#4根据界面提示去安装插件" class="headerlink" title="4根据界面提示去安装插件"></a>4根据界面提示去安装插件</h5><h5 id="5安装ssh-key连接gitLab"><a href="#5安装ssh-key连接gitLab" class="headerlink" title="5安装ssh key连接gitLab"></a>5安装ssh key连接gitLab</h5><p>这个时候要注意，</p><ol><li>配置的公钥私钥来自于jenkins服务器,注意用jenkins<br>账户生成公钥私钥。</li><li>在gitLab的deploy key里配置公钥</li><li>在jenkins凭据里配置私钥</li><li>然后在jenkins服务器上git clone 下地址，用来测试是不是可以连接到gitLab.<br>如果可以证明配置成功。</li></ol><p>gitLab</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;docker-jenkins&quot;&gt;&lt;a href=&quot;#docker-jenkins&quot; class=&quot;headerlink&quot; title=&quot;docker jenkins&quot;&gt;&lt;/a&gt;docker jenkins&lt;/h4&gt;&lt;h5 id=&quot;1拉取镜像&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="docker jenkins" scheme="http://yoursite.com/tags/docker-jenkins/"/>
    
  </entry>
  
  <entry>
    <title>docker example</title>
    <link href="http://yoursite.com/2019/01/25/docker-example/"/>
    <id>http://yoursite.com/2019/01/25/docker-example/</id>
    <published>2019-01-25T07:51:26.000Z</published>
    <updated>2019-01-25T09:04:31.167Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker-example"><a href="#docker-example" class="headerlink" title="docker example"></a>docker example</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tree identidock/</span><br><span class="line">identidock/</span><br><span class="line">└─ app</span><br><span class="line"> └─ identidock.py</span><br></pre></td></tr></table></figure><p>identidock.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__) </span><br><span class="line">@app.route(&apos;/&apos;) </span><br><span class="line">def hello_world():</span><br><span class="line"> return &apos;Hello World!\n&apos;</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"> app.run(debug=True, host=&apos;0.0.0.0&apos;)</span><br></pre></td></tr></table></figure></p><p>在 identidock 目录下，创建一个名为<br>Dockerfile 的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.4</span><br><span class="line">RUN pip install Flask==0.10.1</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY app /app</span><br><span class="line">CMD [&quot;python&quot;, &quot;identidock.py&quot;]</span><br></pre></td></tr></table></figure></p><p>现在，可以构建和运行我们的简单应用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd identidock</span><br><span class="line">$ docker build -t identidock .</span><br><span class="line">...</span><br><span class="line">$ docker run -d -p 5000:5000 identidock</span><br><span class="line">0c75444e8f5f16dfe5aceb0aae074cc33dfc06f2d2fb6adb773ac51f20605aa4</span><br></pre></td></tr></table></figure></p><blockquote><p>我把 -d 选项传给 docker run，让它在后台启动容器，但如果想看到 Web 服务器<br>的输出，也可以把它省略。-p 5000:5000 参数告诉 Docker，我们要将容器的 5000 端口转发<br>到主机上的 5000 端口。</p></blockquote><p>test<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:5000</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p><blockquote><p>目前这个工作流程有一个比较严重的问题：即使代码只有少许改变，我们<br>也需要重新创建镜像，并且重启容器。幸好，有一个简单的解决方法。我们可以把主机上<br>的源码目录绑定挂载（bind mount）到容器内的源码目录之上。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v &quot;$PWD&quot;/app:/app identidock</span><br></pre></td></tr></table></figure><p>-v “$PWD”/app:/app 参数把位于 /app 的 app 目录挂载到容器内。它将覆盖容器中 /app 目录<br>的内容 ，而且在容器内还可以进行读写（如果你不希望这样，也可以把数据卷挂载为只<br>读）。参数 -v 必须是绝对路径，因此在这个例子中，我们在当前的目录前加上 $PWD，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;docker-example&quot;&gt;&lt;a href=&quot;#docker-example&quot; class=&quot;headerlink&quot; title=&quot;docker example&quot;&gt;&lt;/a&gt;docker example&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="http://yoursite.com/2019/01/25/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/01/25/docker常用命令/</id>
    <published>2019-01-25T07:11:13.000Z</published>
    <updated>2019-01-25T07:20:05.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker常用命令-RUN命令"><a href="#docker常用命令-RUN命令" class="headerlink" title="docker常用命令_RUN命令"></a>docker常用命令_RUN命令</h3><blockquote><p>启动新容器时必然会用到它。因此，它是迄<br>今为止最复杂的命令，能支持非常多的参数。它的选项允许用户配置镜像运行的方式、覆<br>盖 Dockerfile 设置、配置联网，以及设置容器的权限和资源。</p></blockquote><table><thead><tr><th>命令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>-a, –attach</td><td style="text-align:center">把指定的数据流（如 STDOUT 之类）连接至终端。若未指定，则默认连接 stdout 和</td></tr></tbody></table><p>stderr。若数据流未指定，而容器以交互模式（-i）启动，则 stdin 也会被连接至终端。<br>此选项与 -d 选项不兼容<br>-d, –detach|使容器在“分离”模式下运行。容器会在后台运行，而命令的返回值是容器的 ID。<br>-i, –interactive|保持 stdin 打开（即使它没有被被连接至终端 10）。一般与 –t 同时使用，用作启动交互<br>式会话的容器。例如：<br>$ docker run -it debian /bin/bash<br>root@bd0f26f928bb:/# ls<br>…省略…</p><p>–restart|配置 Docker 在什么情况下尝试重新启动已退出的容器。参数为 no 意味着永远不会尝<br>试重新启动容器；always 指不管退出状态是什么，总会尝试重新启动；on-failure 仅<br>当退出状态不为 0 的时候才会尝试重启 ，并且可以追加一个可选参数，指定尝试重启<br>的次数，超过重启次数就会放弃（如果没有指定，那就一直重试）。例如，docker run<br>–restart on-failure:10 postgres 将启动 postgres 容器，并当退出值不为 0 的时候，<br>尝试重启最多 10 次。<br>–rm|退出时自动删除容器。不能与 -d 选项同时使用。<br>-t, –tty|分配一个伪终端（pseudo-TTY）。通常与 -i 同时使用，用来启动交互式容器。<br>-e, –env|设置容器内的环境变量。例如：<br>$ docker run -e var1=val -e var2=”val 2” debian env<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>HOSTNAME=b15f833d65d8<br>var1=val<br>var2=val 2<br>HOME=/root<br>另外，–env-file 选项可以经文件传入环境变量。<br>-h, –hostname NAME|设置容器的 unix 主机名为 NAME。例如：<br>$ docker run -h “myhost” debian hostname<br>myhost<br>–name NAME|把 NAME 设置为容器的名称。以后，其他 Docker 命令便可以使用该名称来称呼这个容器。<br>以下选项允许用户进行数据卷的设置<br>-v, –volume|这个选项可以用来设置数据卷（数据卷即一个容器中的文件或目录，实际属于主机的文<br>件系统，而非容器的联合文件系统的一部分），有两种形式的参数可供使用。第一种形<br>式仅指定容器中的目录，Docker 会自行选定一个主机上的目录与之绑定。第二种形式<br>除了指定容器目录，还指定与容器目录绑定的主机目录。<br>–volumes-from|挂载指定容器拥有的数据卷。经常用于数据容器<br>–expose|与 Dockerfile 的 EXPOSE 指令功能一样。指定容器将会使用的端口或端口范围，但并不会<br>把端口打开。只有与 -P 参数同时使用，以及在连接容器时，才有真正意义。<br>–link|建立一个与指定容器连接的内部网络接口。详<br>-p, –publish|“发布”容器的端口，使主机能访问它。若没有指定主机端口，则会随机分配一个高端<br>口，可通过 docker port 命令查看分配了哪个端口。还可以指定端口是在主机的哪个网<br>络接口开放。<br>-P, –publish-all|“发布”所有已指定为开放（exposed）的容器端口，使主机能访问它们。每个容器端口<br>均对应一个随机挑选的高端口。docker port 命令可以用来查看端口之间的映射关系。<br>如果你需要更高级的联网功能，还有几个进阶的选项可用。但请注意，这些选项中有一些<br>要求你对联网有一定了解，以及明白联网在 Docker 中如何实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker常用命令-RUN命令&quot;&gt;&lt;a href=&quot;#docker常用命令-RUN命令&quot; class=&quot;headerlink&quot; title=&quot;docker常用命令_RUN命令&quot;&gt;&lt;/a&gt;docker常用命令_RUN命令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;启
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>gitlab备份还原</title>
    <link href="http://yoursite.com/2019/01/23/gitlab%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/"/>
    <id>http://yoursite.com/2019/01/23/gitlab备份还原/</id>
    <published>2019-01-23T02:48:49.000Z</published>
    <updated>2019-01-24T08:14:51.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="备份跟还原-GitLab"><a href="#备份跟还原-GitLab" class="headerlink" title="备份跟还原 GitLab"></a>备份跟还原 GitLab</h3><p>应用数据备份创建的压缩文件包含了数据库，所有代码仓库和所有附件。<br>你可以在另一个利用同一个版本的gitLab中回复。<br>通过备份跟恢复是迁移你的仓库从一个服务器到另一个的最好的方式。</p><h4 id="需要条件"><a href="#需要条件" class="headerlink" title="需要条件"></a>需要条件</h4><p>为了能够备份跟恢复，你需要在你的系统中安装2个必要的工具。</p><h5 id="Rsync-远程同步工具"><a href="#Rsync-远程同步工具" class="headerlink" title="Rsync(远程同步工具)"></a>Rsync(远程同步工具)</h5><p>如果你已经安装了GitLab:<br> 利用OmniBus包<br> 确保rsync都安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt-get install rsync</span><br><span class="line"># RHEL/CentOS</span><br><span class="line">sudo yum install rsync</span><br></pre></td></tr></table></figure><h5 id="Tar"><a href="#Tar" class="headerlink" title="Tar"></a>Tar</h5><p>确保Tar命令在1.3.0以上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar --version</span><br></pre></td></tr></table></figure></p><h5 id="备份timestamp"><a href="#备份timestamp" class="headerlink" title="备份timestamp"></a>备份timestamp</h5><blockquote><p>在 GitLab 9.2 the timestamp 格式变了从<br>EPOCH_YYYY_MM_DD 到 EPOCH_YYYY_MM_DD_GitLab_version,<br>比如 1493107454_2018_04_25 会变成 1493107454_2018_04_25_10.6.4-ce.</p></blockquote><h5 id="Gitlab的备份目录路径设置"><a href="#Gitlab的备份目录路径设置" class="headerlink" title="Gitlab的备份目录路径设置"></a>Gitlab的备份目录路径设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@code-server ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[&apos;manage_backup_path&apos;] = true</span><br><span class="line">gitlab_rails[&apos;backup_path&apos;] = &quot;/data/gitlab/backups&quot;    //gitlab备份目录</span><br><span class="line">gitlab_rails[&apos;backup_archive_permissions&apos;] = 0644       //生成的备份文件权限</span><br><span class="line">gitlab_rails[&apos;backup_keep_time&apos;] = 7776000              //备份保留天数为3个月（即90天，这里是7776000秒）</span><br><span class="line"> </span><br><span class="line">[root@code-server ~]# mkdir -p /data/gitlab/backups</span><br><span class="line">[root@code-server ~]# chown -R git.git /data/gitlab/backups</span><br><span class="line">[root@code-server ~]# chmod -R 777 /data/gitlab/backups</span><br><span class="line">  </span><br><span class="line">如上设置了gitlab备份目录路径为/data/gitlab/backups，最后使用下面命令重载gitlab配置文件，是上述修改生效！</span><br><span class="line">root@code-server ~]# gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h5 id="GItlab备份操作（使用备份命令”gitlab-rake-gitlab-backup-create”）"><a href="#GItlab备份操作（使用备份命令”gitlab-rake-gitlab-backup-create”）" class="headerlink" title="GItlab备份操作（使用备份命令”gitlab-rake gitlab:backup:create”）"></a>GItlab备份操作（使用备份命令”gitlab-rake gitlab:backup:create”）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">手动备份gitlab</span><br><span class="line">[root@code-server backups]# gitlab-rake gitlab:backup:create</span><br><span class="line">Dumping database ...</span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line">done</span><br><span class="line">Dumping repositories ...</span><br><span class="line"> * treesign/treesign ... [DONE]</span><br><span class="line"> * gateway/gateway ... [DONE]</span><br><span class="line"> * treesign/treesign-doc ... [SKIPPED]</span><br><span class="line"> * qwsign/qwsign ... [DONE]</span><br><span class="line"> * qwsign/qwsign-doc ... [DONE]</span><br><span class="line"> * test/test ... [DONE]</span><br><span class="line">done</span><br><span class="line">Dumping uploads ...</span><br><span class="line">done</span><br><span class="line">Dumping builds ...</span><br><span class="line">done</span><br><span class="line">Dumping artifacts ...</span><br><span class="line">done</span><br><span class="line">Dumping pages ...</span><br><span class="line">done</span><br><span class="line">Dumping lfs objects ...</span><br><span class="line">done</span><br><span class="line">Dumping container registry images ...</span><br><span class="line">[DISABLED]</span><br><span class="line">Creating backup archive: 1510471890_2017_11_12_9.4.5_gitlab_backup.tar ... done</span><br><span class="line">Uploading backup archive to remote storage  ... skipped</span><br><span class="line">Deleting tmp directories ... done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">Deleting old backups ... done. (0 removed)</span><br><span class="line"> </span><br><span class="line">然后查看下备份文件（文件权限是设定好的644）</span><br><span class="line">[root@code-server backups]# ll</span><br><span class="line">total 244</span><br><span class="line">-rw-r--r-- 1 git git 245760 Nov 12 15:33 1510472027_2017_11_12_9.4.5_gitlab_backup.tar</span><br><span class="line"> </span><br><span class="line">编写备份脚本，结合crontab实施自动定时备份，比如每天0点、6点、12点、18点各备份一次</span><br><span class="line">[root@code-server backups]# pwd</span><br><span class="line">/data/gitlab/backups</span><br><span class="line">[root@code-server backups]# vim gitlab_backup.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">/usr/bin/gitlab-rake gitlab:backup:create CRON=1</span><br><span class="line"> </span><br><span class="line">注意：环境变量CRON=1的作用是如果没有任何错误发生时， 抑制备份脚本的所有进度输出</span><br><span class="line"> </span><br><span class="line">[root@code-server backups]# crontab -l</span><br><span class="line">0 0,6,12,18 * * * /bin/bash -x /data/gitlab/backups/gitlab_backup.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h5 id="Gitlab恢复操作"><a href="#Gitlab恢复操作" class="headerlink" title="Gitlab恢复操作"></a>Gitlab恢复操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">GItlab只能还原到与备份文件相同的gitlab版本。</span><br><span class="line">假设在上面gitlab备份之前创建了test项目，然后不小心误删了test项目，现在就进行gitlab恢复操作：</span><br><span class="line">  </span><br><span class="line">1）停止相关数据连接服务</span><br><span class="line">[root@code-server backups]# gitlab-ctl stop unicorn</span><br><span class="line">ok: down: unicorn: 0s, normally up</span><br><span class="line">[root@code-server backups]# gitlab-ctl stop sidekiq</span><br><span class="line">ok: down: sidekiq: 1s, normally up</span><br><span class="line">[root@code-server backups]# gitlab-ctl status</span><br><span class="line">run: gitaly: (pid 98087) 1883s; run: log: (pid 194202) 163003s</span><br><span class="line">run: gitlab-monitor: (pid 98101) 1883s; run: log: (pid 194363) 163002s</span><br><span class="line">run: gitlab-workhorse: (pid 98104) 1882s; run: log: (pid 194362) 163002s</span><br><span class="line">run: logrotate: (pid 98117) 1882s; run: log: (pid 5793) 160832s</span><br><span class="line">run: nginx: (pid 98123) 1881s; run: log: (pid 194359) 163002s</span><br><span class="line">run: node-exporter: (pid 98167) 1881s; run: log: (pid 194360) 163002s</span><br><span class="line">run: postgres-exporter: (pid 98173) 1881s; run: log: (pid 194204) 163003s</span><br><span class="line">run: postgresql: (pid 98179) 1880s; run: log: (pid 194365) 163002s</span><br><span class="line">run: prometheus: (pid 98187) 1880s; run: log: (pid 194364) 163002s</span><br><span class="line">run: redis: (pid 98230) 1879s; run: log: (pid 194358) 163002s</span><br><span class="line">run: redis-exporter: (pid 98234) 1879s; run: log: (pid 194208) 163003s</span><br><span class="line">down: sidekiq: 8s, normally up; run: log: (pid 194437) 163001s</span><br><span class="line">down: unicorn: 21s, normally up; run: log: (pid 194443) 163001s</span><br><span class="line">  </span><br><span class="line">2）现在通过之前的备份文件进行恢复（必须要备份文件放到备份路径下，这里备份路径我自定义的/data/gitlab/backups，默认的是/var/opt/gitlab/backups）</span><br><span class="line">[root@code-server backups]# pwd</span><br><span class="line">/data/gitlab/backups</span><br><span class="line">[root@code-server backups]# ll</span><br><span class="line">total 244</span><br><span class="line">-rw-r--r-- 1 git git 245760 Nov 12 15:33 1510472027_2017_11_12_9.4.5_gitlab_backup.tar</span><br><span class="line">  </span><br><span class="line">Gitlab的恢复操作会先将当前所有的数据清空，然后再根据备份数据进行恢复</span><br><span class="line">[root@code-server backups]# gitlab-rake gitlab:backup:restore BACKUP=1510472027_2017_11_12_9.4.5</span><br><span class="line">Unpacking backup ... done</span><br><span class="line">Before restoring the database we recommend removing all existing</span><br><span class="line">tables to avoid future upgrade problems. Be aware that if you have</span><br><span class="line">custom tables in the GitLab database these tables and all data will be</span><br><span class="line">removed.</span><br><span class="line">  </span><br><span class="line">Do you want to continue (yes/no)?</span><br><span class="line">........</span><br><span class="line">ALTER TABLE</span><br><span class="line">ALTER TABLE</span><br><span class="line">ALTER TABLE</span><br><span class="line">ALTER TABLE</span><br><span class="line">WARNING:  no privileges were granted for &quot;public&quot;</span><br><span class="line">GRANT</span><br><span class="line">[DONE]</span><br><span class="line">done</span><br><span class="line">Restoring repositories ...</span><br><span class="line"> * treesign/treesign ... [DONE]</span><br><span class="line"> * gateway/gateway ... [DONE]</span><br><span class="line"> * treesign/treesign-doc ... [DONE]</span><br><span class="line"> * qwsign/qwsign ... [DONE]</span><br><span class="line"> * qwsign/qwsign-doc ... [DONE]</span><br><span class="line"> * test/test ... [DONE]</span><br><span class="line">Put GitLab hooks in repositories dirs [DONE]</span><br><span class="line">done</span><br><span class="line">Restoring uploads ...</span><br><span class="line">done</span><br><span class="line">Restoring builds ...</span><br><span class="line">done</span><br><span class="line">Restoring artifacts ...</span><br><span class="line">done</span><br><span class="line">Restoring pages ...</span><br><span class="line">done</span><br><span class="line">Restoring lfs objects ...</span><br><span class="line">done</span><br><span class="line">This will rebuild an authorized_keys file.</span><br><span class="line">You will lose any data stored in authorized_keys file.</span><br><span class="line">Do you want to continue (yes/no)? yes</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Deleting tmp directories ... done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">[root@code-server backups]#</span><br><span class="line">  </span><br><span class="line">最后再次启动Gitlab</span><br><span class="line">[root@code-server backups]# gitlab-ctl start</span><br><span class="line">ok: run: gitaly: (pid 98087) 2138s</span><br><span class="line">ok: run: gitlab-monitor: (pid 98101) 2138s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 98104) 2137s</span><br><span class="line">ok: run: logrotate: (pid 98117) 2137s</span><br><span class="line">ok: run: nginx: (pid 98123) 2136s</span><br><span class="line">ok: run: node-exporter: (pid 98167) 2136s</span><br><span class="line">ok: run: postgres-exporter: (pid 98173) 2136s</span><br><span class="line">ok: run: postgresql: (pid 98179) 2135s</span><br><span class="line">ok: run: prometheus: (pid 98187) 2135s</span><br><span class="line">ok: run: redis: (pid 98230) 2134s</span><br><span class="line">ok: run: redis-exporter: (pid 98234) 2134s</span><br><span class="line">ok: run: sidekiq: (pid 104494) 0s</span><br><span class="line">ok: run: unicorn: (pid 104497) 1s</span><br><span class="line">[root@code-server backups]# gitlab-ctl status</span><br><span class="line">run: gitaly: (pid 98087) 2142s; run: log: (pid 194202) 163262s</span><br><span class="line">run: gitlab-monitor: (pid 98101) 2142s; run: log: (pid 194363) 163261s</span><br><span class="line">run: gitlab-workhorse: (pid 98104) 2141s; run: log: (pid 194362) 163261s</span><br><span class="line">run: logrotate: (pid 98117) 2141s; run: log: (pid 5793) 161091s</span><br><span class="line">run: nginx: (pid 98123) 2140s; run: log: (pid 194359) 163261s</span><br><span class="line">run: node-exporter: (pid 98167) 2140s; run: log: (pid 194360) 163261s</span><br><span class="line">run: postgres-exporter: (pid 98173) 2140s; run: log: (pid 194204) 163262s</span><br><span class="line">run: postgresql: (pid 98179) 2139s; run: log: (pid 194365) 163261s</span><br><span class="line">run: prometheus: (pid 98187) 2139s; run: log: (pid 194364) 163261s</span><br><span class="line">run: redis: (pid 98230) 2138s; run: log: (pid 194358) 163261s</span><br><span class="line">run: redis-exporter: (pid 98234) 2138s; run: log: (pid 194208) 163262s</span><br><span class="line">run: sidekiq: (pid 104494) 4s; run: log: (pid 194437) 163260s</span><br><span class="line">run: unicorn: (pid 104497) 4s; run: log: (pid 194443) 163260s</span><br><span class="line"> </span><br><span class="line">恢复命令完成后，可以check检查一下恢复情况</span><br><span class="line">[root@code-server backups]# gitlab-rake gitlab:check SANITIZE=true</span><br><span class="line">Checking GitLab Shell ...</span><br><span class="line"> </span><br><span class="line">GitLab Shell version &gt;= 5.3.1 ? ... OK (5.3.1)</span><br><span class="line">Repo base directory exists?</span><br><span class="line">default... yes</span><br><span class="line">Repo storage directories are symlinks?</span><br><span class="line">default... no</span><br><span class="line">Repo paths owned by git:root, or git:git?</span><br><span class="line">default... yes</span><br><span class="line">Repo paths access is drwxrws---?</span><br><span class="line">default... yes</span><br><span class="line">hooks directories in repos are links: ...</span><br><span class="line">5/1 ... ok</span><br><span class="line">6/2 ... ok</span><br><span class="line">5/3 ... repository is empty</span><br><span class="line">12/4 ... ok</span><br><span class="line">12/5 ... ok</span><br><span class="line">Running /opt/gitlab/embedded/service/gitlab-shell/bin/check</span><br><span class="line">Check GitLab API access: OK</span><br><span class="line">Access to /var/opt/gitlab/.ssh/authorized_keys: OK</span><br><span class="line">Send ping to redis server: OK</span><br><span class="line">gitlab-shell self-check successful</span><br><span class="line"> </span><br><span class="line">Checking GitLab Shell ... Finished</span><br><span class="line"> </span><br><span class="line">Checking Sidekiq ...</span><br><span class="line"> </span><br><span class="line">Running? ... yes</span><br><span class="line">Number of Sidekiq processes ... 1</span><br><span class="line"> </span><br><span class="line">Checking Sidekiq ... Finished</span><br><span class="line"> </span><br><span class="line">Checking Reply by email ...</span><br><span class="line"> </span><br><span class="line">Reply by email is disabled in config/gitlab.yml</span><br><span class="line"> </span><br><span class="line">Checking Reply by email ... Finished</span><br><span class="line"> </span><br><span class="line">Checking LDAP ...</span><br><span class="line"> </span><br><span class="line">LDAP is disabled in config/gitlab.yml</span><br><span class="line"> </span><br><span class="line">Checking LDAP ... Finished</span><br><span class="line"> </span><br><span class="line">Checking GitLab ...</span><br><span class="line"> </span><br><span class="line">Git configured correctly? ... yes</span><br><span class="line">Database config exists? ... yes</span><br><span class="line">All migrations up? ... yes</span><br><span class="line">Database contains orphaned GroupMembers? ... no</span><br><span class="line">GitLab config exists? ... yes</span><br><span class="line">GitLab config up to date? ... yes</span><br><span class="line">Log directory writable? ... yes</span><br><span class="line">Tmp directory writable? ... yes</span><br><span class="line">Uploads directory exists? ... yes</span><br><span class="line">Uploads directory has correct permissions? ... yes</span><br><span class="line">Uploads directory tmp has correct permissions? ... yes</span><br><span class="line">Init script exists? ... skipped (omnibus-gitlab has no init script)</span><br><span class="line">Init script up-to-date? ... skipped (omnibus-gitlab has no init script)</span><br><span class="line">Projects have namespace: ...</span><br><span class="line">5/1 ... yes</span><br><span class="line">6/2 ... yes</span><br><span class="line">5/3 ... yes</span><br><span class="line">12/4 ... yes</span><br><span class="line">12/5 ... yes</span><br><span class="line">Redis version &gt;= 2.8.0? ... yes</span><br><span class="line">Ruby version &gt;= 2.3.3 ? ... yes (2.3.3)</span><br><span class="line">Git version &gt;= 2.7.3 ? ... yes (2.13.4)</span><br><span class="line">Active users: ... 11</span><br><span class="line"> </span><br><span class="line">Checking GitLab ... Finished</span><br><span class="line">  </span><br><span class="line">然后稍等一会（如果启动gitlab后，访问出现500，这是因为redis等程序还没完全启动，等一会儿访问就ok了），再次登录Gitlab，就会发现之前误删除的test项目已经恢复了！</span><br><span class="line">  </span><br><span class="line">另外：Gitlab迁移与恢复一样，但是要求两个GitLab版本号一致</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;备份跟还原-GitLab&quot;&gt;&lt;a href=&quot;#备份跟还原-GitLab&quot; class=&quot;headerlink&quot; title=&quot;备份跟还原 GitLab&quot;&gt;&lt;/a&gt;备份跟还原 GitLab&lt;/h3&gt;&lt;p&gt;应用数据备份创建的压缩文件包含了数据库，所有代码仓库和所有附
      
    
    </summary>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
</feed>
